`parseInt` и `parseFloat` — это функции в JavaScript, которые используются для преобразования строковых значений в числа.

### parseInt

- **Описание**: `parseInt` принимает строку и преобразует её в целое число. Если строка начинается с числа, функция вернёт это число, игнорируя все символы после него. Если строка не начинается с числа, функция вернёт `NaN` (Not-a-Number).

- **Синтаксис**:
javascript
  parseInt(string, radix);
  


- `string`: Строка, которую нужно преобразовать в целое число.
- `radix` (необязательный): Основание системы счисления (от 2 до 36). Например, для десятичных чисел radix будет 10.

- **Пример**:
javascript
  parseInt("123");      // 123
  parseInt("123abc");   // 123
  parseInt("abc123");   // NaN
  parseInt("10", 2);    // 2 (поскольку 10 в двоичной системе — это 2 в десятичной)
  


### parseFloat

- **Описание**: `parseFloat` преобразует строку в число с плавающей запятой. Как и `parseInt`, он будет читать строку до тех пор, пока не встретит символ, который не может быть частью числа.

- **Синтаксис**:
javascript
  parseFloat(string);
  


- `string`: Строка, которую нужно преобразовать в число с плавающей запятой.

- **Пример**:
javascript
  parseFloat("123.45");    // 123.45
  parseFloat("123.45abc");  // 123.45
  parseFloat("abc123.45");  // NaN
  


### Различия между parseInt и parseFloat

1. **Тип возвращаемого значения**: `parseInt` возвращает целые числа, а `parseFloat` — числа с плавающей запятой.
2. **Обработка знаков**: Оба парсера правильно обрабатывают знаки (положительные и отрицательные числа).
3. **Пунктуация**: `parseFloat` может обрабатывать числа с десятичной точкой, тогда как `parseInt` будет игнорировать всё после точки.

### Рекомендации

- При использовании `parseInt` и `parseFloat`, всегда старайтесь проверять на наличие `NaN`, если не уверены в формате входных данных.
- Для работы с числами лучше избегать использования этих функций на `undefined` или `null`, так как это может привести к неожиданным результатам.