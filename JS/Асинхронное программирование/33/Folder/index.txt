Streams (потоки) — это последовательности данных, которые могут быть обработаны по мере их поступления, а не после завершения всего 
процесса передачи. Эта концепция широко используется в Node.js и других веб-технологиях для обработки больших объемов данных, благодаря 
чему можно избежать перегрузки памяти, так как данные могут обрабатываться частями.

Потоки могут быть либо читаемыми, либо записываемыми, и помогают в асинхронной обработке данных, позволяя выполнять 
операции, не дожидаясь завершения поступления всех данных.

Основные типы потоков в Node.js

1. Readable Streams — потоки данных, которые можно читать. Например, потоки чтения могут использоваться для чтения данных из файла 
или получения данных от HTTP-сервера.
2. Writable Streams — потоки данных, в которые можно записывать. Например, потоки записи могут использоваться для записи данных в файл 
или отправки данных на HTTP-клиент.
3. Duplex Streams — это потоки, которые могут одновременно как читать, так и записывать данные. Примером может служить сетевое соединение.
4. Transform Streams — это потоки, которые могут изменять (преобразовывать) данные в процессе чтения и записи.

Зачем использовать потоки?

- Эффективность памяти: Потоки позволяют обрабатывать данные по частям, что уменьшает использование памяти при работе с большими 
объемами данных.
- Асинхронность: Потоки позволяют продолжать выполнение других операций, пока данные передаются, что улучшает отзывчивость приложения.
- Производительность: Работа с потоками может быть более производительной по сравнению с загрузкой и обработкой всех данных сразу.

Заключение
Потоки представляют собой мощный инструмент для эффективной асинхронной обработки данных в Node.js и других технологиях. 
Используя потоки, вы можете избежать перегрузки памяти и улучшить производительность ваших приложений при работе с большими объемами данных.