// Пример использования потоков
// Чтение и запись файла
// В этом примере мы будем использовать потоки для чтения содержимого одного файла и записи его в другой. Для этого мы воспользуемся встроенными модулями `fs` (file system) и `stream`.

const fs = require('fs');

// Создание читаемого потока
const readableStream = fs.createReadStream('input.txt', { encoding: 'utf8' });

// Создание записываемого потока
const writableStream = fs.createWriteStream('output.txt');

// Чтение данных из потока и запись в другой поток
readableStream.on('data', (chunk) => {
  console.log(`Читаем: ${chunk}`);
  writableStream.write(chunk);
});

// Обработка конца потока
readableStream.on('end', () => {
  console.log('Чтение завершено');
  writableStream.end(); // Закрываем записываемый поток
});

// Обработка ошибок
readableStream.on('error', (err) => {
  console.error('Ошибка чтения:', err);
});

writableStream.on('finish', () => {
  console.log('Запись завершена');
});


// Объяснение
// 1. Создание читаемого потока:
// - `fs.createReadStream('input.txt')` создает поток для чтения данных из файла `input.txt`.
// 2. Создание записываемого потока:
// - `fs.createWriteStream('output.txt')` создает поток для записи данных в файл `output.txt`.
// 3. Чтение данных:
// - Мы подписываемся на событие `'data'`, которое срабатывает при поступлении нового блока данных (chunk). В этом событии мы просто выводим 
// данные в консоль и записываем их в выходной файл.
// 4. Обработка завершения потока:
// - Событие `'end'` уведомляет, что все данные были прочитаны. После этого мы закрываем записываемый поток с помощью `writableStream.end()`.
// 5. Обработка ошибок:
// - Подписка на событие `'error'` позволяет отлавливать ошибки, которые могут возникнуть при работе с потоками.
