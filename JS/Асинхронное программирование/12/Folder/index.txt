Использование async и await в JavaScript позволяет работать с асинхронным кодом более удобно и читабельно, чем использование 
традиционных методов, таких как цепочки промисов. Вот основные моменты, которые нужно знать о `async` и `await`.

### Основы использования async и await

1. Объявление функции как асинхронной: Чтобы использовать await, функция должна быть объявлена с ключевым словом async.
2. Использование await: Ключевое слово await можно использовать только внутри асинхронной функции. Оно ожидает завершения 
промиса и возвращает его результат. Если промис отклоняется, будет выброшено исключение.
3. Обработка ошибок: Рекомендуется использовать try...catch для обработки ошибок, возникающих при выполнении асинхронных операций.
4. Возврат значений: Асинхронные функции автоматически возвращают промисы, поэтому любой результат, возвращенный из функции, будет обернут в промис.