В JavaScript таймеры, такие как setTimeout и setInterval, позволяют выполнять функции с задержкой или повторять 
их выполнение через заданные интервалы времени. Эти функции являются асинхронными и добавляют задачи в очередь событий, которые 
будут выполнены, когда стек вызовов будет пуст. Давайте подробнее рассмотрим, как работают setTimeout и setInterval на примерах.

setTimeout

Функция setTimeout запускает таймер, который вызывает указанную функцию после истечения заданного времени. 
Синтаксис:
setTimeout(callback, delay, [arg1, arg2, ...]);

- callbac — функция, которую нужно выполнить.
- delay — время в миллисекундах, через которое будет вызвана функция.
- [arg1, arg2, ...] — не обязательные аргументы, которые будут переданы в функцию.

setInterval
Функция `setInterval` запускает таймер, который периодически вызывает указанную функцию через заданные интервалы времени. Синтаксис:
setInterval(callback, interval, [arg1, arg2, ...]);

- callback — функция, которую нужно выполнять.
- interval — время в миллисекундах между вызовами функции.
- [arg1, arg2, ...] — не обязательные аргументы, которые будут переданы в функцию.


Важные моменты
1. Асинхронность: Обе функции setTimeout и setInterval не блокируют выполнение кода. То есть весь код после их вызова 
будет выполнен немедленно, и только после истечения указанного времени будет вызвана функция.
2. Очередь событий: Как упоминалось ранее, таймеры добавляют функции в очередь событий, которые будут выполнены в момент, когда 
стек вызовов станет пуст.
3. Идентификатор таймера: setTimeout и setInterval возвращают идентификаторы, которые можно использовать, чтобы остановить таймер 
с помощью clearTimeout и clearInterval соответственно.
