Асинхронное программирование в контексте JavaScript — это подход к написанию кода, который 
позволяет выполнять операции без блокировки основного потока выполнения, что особенно важно в 
средах, где время отклика имеет значение, как, например, в веб-разработке
В JavaScript асинхронное программирование реализуется с помощью следующих механизмов:

1. Callbacks (обратные вызовы): Это функции, которые передаются в другие функции в качестве аргументов. 
Когда асинхронная операция завершается, вызывается переданный callback. Однако использование callback часто 
приводит к "адской вложенности" (callback hell), когда несколько вложенных callback-функций затрудняют чтение и поддержку кода.

2. Promises (промисы): Это объекты, представляющие результат асинхронной операции, который 
может быть получен сейчас, позже или никогда. Промисы позволяют лучше обрабатывать асинхронные операции и 
вести себя более предсказуемо по сравнению с callback.

3. async/await: Это синтаксический сахар над промисами, который позволяет писать асинхронный код, используя 
синхронный стиль. Ключевое слово `async` используется для определения функции как асинхронной, а `await` — для 
ожидания разрешения промиса. Это делает код более читабельным и простым для понимания.
