async function fetchData(url) {
  try {
    const response = await fetch(url);

    // Проверяем, успешен ли ответ
    if (!response.ok) {
      throw new Error(`Ошибка HTTP: ${response.status}`); // Вызываем ошибку для обработки ниже
    }

    const data = await response.json(); // Преобразуем ответ в JSON
    return data; // Возвращаем полученные данные
  } catch (error) {
    console.error("Произошла ошибка при получении данных:", error);
    // Можно обработать ошибку или снова выбросить ее
    throw error; // Рекомендуется выбросить ошибку, если хотите, чтобы вызывающая функция тоже ее обработала
  }
}

// Пример использования функции
(async () => {
  try {
    const data = await fetchData("https://api.example.com/data");
    console.log(data);
  } catch (error) {
    console.error("Обработка ошибки в вызывающей функции:", error);
  }
})();

// Объяснение:

// 1. Объявление функции как async: Функция fetchData объявлена с использованием ключевого слова async
// что позволяет использовать await внутри нее.
// 2. Использование try...catch: Внутри функции мы используем блок try
// для выполнения кода, где может произойти ошибка. Если ошибка произойдет (например, если запрос не удался),
// управление перейдет в блок `catch`, где мы можем обработать ошибку.
// 3. Проверка ответа: Мы проверяем, успешен ли HTTP-ответ (например, код статуса 200). Если нет, выбрасываем новую ошибку.
// 4. Внешний try...catch При вызове `fetchData` мы также оборачиваем вызов в `try...catch`, чтобы правильно
// обработать возможные ошибки, которые могут произойти при вызове асинхронной функции.
