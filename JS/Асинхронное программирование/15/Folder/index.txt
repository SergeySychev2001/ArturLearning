JavaScript обрабатывает асинхронные операции, несмотря на свой однопоточный характер, благодаря механизму, известному как «event loop» 
(цикл событий). Давайте подробнее рассмотрим, как это происходит.
1. Однопоточная архитектура: JavaScript работает в одном основном потоке, что означает, что он может 
выполнять только одну операцию одновременно. Однако это не мешает обработке нескольких операций одновременно.
2. Асинхронные операции: Когда JavaScript выполняет асинхронные операции (например, запросы к серверу, 
таймеры, чтение файлов и т. д.), они не блокируют основной поток. Вместо этого такие операции передаются в 
«внешние» системы (например, браузер, сервер и т. д.), которые могут выполнять их асинхронно.
3. Обратные вызовы (Callbacks): Как только асинхронная операция завершается, она вызывает функцию обратного 
вызова (callback), которая регистрируется во время инициализации этой операции. Этот вызов не будет выполнен сразу, а 
будет добавлен в очередь задач.
4. Цикл событий (Event Loop): Event loop — это механизм, который следит за стеком вызовов и очередью задач. Когда стек 
вызовов пуст (то есть все синхронные операции завершены), event loop извлекает первый элемент из очереди задач и помещает 
его в стек вызовов для выполнения.
5. Promise и async/await: Для более удобной работы с асинхронным кодом в JavaScript были введены `Promise` и 
конструкции `async`/`await`, которые позволяют писать асинхронный код в более линейном и читаемом виде, не прибегая к вложенным callback-функциям.
6. Microtasks и macrotasks: В JavaScript есть две категории задач: микротаски и макротаски. Микротаски (например, промисы) 
обрабатываются в первую очередь после выполнения всех синхронных операций, а макротаски (такие как таймеры и события) обрабатываются позже.
