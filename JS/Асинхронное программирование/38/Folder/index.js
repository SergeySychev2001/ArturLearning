// Пример использования `Promise.all`
// Рассмотрим пример, в котором мы используем `Promise.all` для выполнения нескольких асинхронных операций, таких
// как загрузка данных из разных ресурсов.

// Асинхронные функции для имитации получения данных
function fetchDataFromAPI1() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("Данные из API 1");
    }, 2000); // Имитация задержки в 2 секунды
  });
}

function fetchDataFromAPI2() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("Данные из API 2");
    }, 1000); // Имитация задержки в 1 секунду
  });
}

function fetchDataFromAPI3() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("Данные из API 3");
    }, 1500); // Имитация задержки в 1.5 секунды
  });
}

// Использование Promise.all для параллельной загрузки данных
Promise.all([fetchDataFromAPI1(), fetchDataFromAPI2(), fetchDataFromAPI3()])
  .then((results) => {
    console.log("Все данные загружены:");
    console.log(results); // ['Данные из API 1', 'Данные из API 2', 'Данные из API 3']
  })
  .catch((error) => {
    console.error("Ошибка при загрузке данных:", error);
  });

// Объяснение кода
// 1. Функции `fetchDataFromAPI1`, `fetchDataFromAPI2`, `fetchDataFromAPI3`**: Каждая из них представляет собой асинхронную
// операцию, которая возвращает промис. Эти функции имитируют API-запросы с использованием `setTimeout`.
// 2. `Promise.all`: Мы передаём массив промисов, возвращаемых вышеупомянутыми функциями. `Promise.all` начинает ждать завершения
// всех переданных промисов.
// 3. Успех: Если все три API-запроса выполняются успешно, `then` возвращает массив результатов в том же порядке, в каком были переданы промисы.
// 4. Обработка ошибок: Если любой из промисов будет отклонён, выполнится `catch`, и будет выведено сообщение об ошибке.
