// Пример использования Promise:

function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const success = true; // измените на false, чтобы симулировать ошибку
      if (success) {
        resolve("Данные успешно получены!");
      } else {
        reject("Ошибка при получении данных.");
      }
    }, 2000);
  });
}

fetchData()
  .then((data) => {
    console.log(data); // "Данные успешно получены!"
  })
  .catch((error) => {
    console.error(error); // "Ошибка при получении данных."
  })
  .finally(() => {
    console.log("Загрузка завершена."); // выполнится в любом случае
  });

// Преимущества использования Promises:
// 1. Улучшение читаемости: Код, использующий Promises, легче читать и понимать, поскольку цепочка вызовов `then` и `catch`
// структурирует асинхронные операции.
// 2. Обработка ошибок: Error handling становится более удобным благодаря использованию метода `catch`, который позволяет
// централизованно обрабатывать ошибки.
// 3. Композиция: Promises легко комбинировать. Вы можете использовать методы, такие как `Promise.all()` и `Promise.race()`, для
// работы с несколькими Promise одновременно.
