Асинхронная загрузка модулей в JavaScript позволяет загружать и использовать модули по мере необходимости, а не загружать их все 
сразу при загрузке страницы. Это улучшает производительность приложения и сокращает время загрузки, особенно для больших проектов. 
В JavaScript есть несколько способов реализовать асинхронную загрузку модулей, наиболее распространённые варианты — это использование 
динамического импорта (динамических import) и библиотек, таких как RequireJS или SystemJS. Однако рассмотрим использование динамического 
импорта, так как он является частью стандарта ES2020 и поддерживается в большинстве современных браузеров.

1. Динамический import
Динамический import позволяет загружать модули асинхронно, используя синтаксис `import()`. При 
этом вы можете загружать модуль только в нужный момент, и JavaScript вернёт Promise, позволяя работать с результатом загрузки.
2. Преимущества динамического импорта
- Ленивая загрузка: Модули загружаются только тогда, когда они необходимы, что сокращает время начальной загрузки.
- Управление зависимостями: Можно загружать различные модули в зависимости от условий выполнения (например, при взаимодействии с пользователем).
- Функциональность: Это позволяет создавать более чистый и управляемый код.
3. Поддержка в браузерах
Динамический import поддерживается в большинстве современных браузеров. Если ваш проект должен поддерживать старые браузеры, 
вам может потребоваться использовать транспайлеры, такие как Babel, которые позволяют преобразовывать код ES6+ в более старые версии JavaScript.
4. Использование систем модулей
Если вам необходимо более комплексное управление зависимостями и модулями, вы можете использовать библиотеки, такие как RequireJS, 
которые поддерживают асинхронную загрузку модулей.
