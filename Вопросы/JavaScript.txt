========================Основы JavaScript========================
1. Что такое переменная в JavaScript?                     10.07.2024|11.07.2024 
2. Какие типы данных существуют в JavaScript?             10.07.2024|11.07.2024 
3. Как объявить переменную в JavaScript?                  10.07.2024|11.07.2024 
4. Что такое hoisting?                                    10.07.2024|11.07.2024 
5. Какие есть операторы сравнения в JavaScript?           10.07.2024|11.07.2024 
6. Что такое условные операторы?                          10.07.2024|11.07.2024 
7. Как работает цикл `for`?                               10.07.2024|11.07.2024 
8. В чем разница между `==` и `===`?                      10.07.2024|11.07.2024 
9. Какие значения в JavaScript считаются falsy?           10.07.2024|11.07.2024 
10. Что такое массив и как его создать?                   10.07.2024|11.07.2024 
11. Как добавить элемент в массив?                        10.07.2024|11.07.2024 
12. Как удалить элемент из массива?                       10.07.2024|11.07.2024 
13. Что такое функция в JavaScript?                       10.07.2024|11.07.2024 
14. Как создать функцию?                                  10.07.2024|11.07.2024 
15. Что такое анонимная функция?                          10.07.2024|11.07.2024 
16. Что такое стрелочная функция?                         10.07.2024|11.07.2024 
17. Какие есть способы объявления функций?                10.07.2024|11.07.2024 
18. Что такое область видимости переменной?               10.07.2024|11.07.2024 
19. Что такое замыкание (closure)?                        10.07.2024|11.07.2024 
20. Что такое глобальная переменная?                      10.07.2024|11.07.2024 
21. Что такое локальная переменная?                       11.07.2024 
22. Как передать параметр в функцию?                      11.07.2024 
23. Что такое возвращаемое значение функции?              11.07.2024 
24. Что такое объект в JavaScript?                        11.07.2024 
25. Как создать объект?                                   11.07.2024 
26. Как получить доступ к свойству объекта?               11.07.2024 
27. Как изменить свойство объекта?                        11.07.2024 
28. Что такое метод объекта?                              11.07.2024 
29. Как удалить свойство из объекта?                      11.07.2024 
30. Что такое прототип объекта?                           11.07.2024 
31. Что такое наследование в JavaScript?                  11.07.2024 
32. Что такое конструктор объекта?                        11.07.2024 
33. Что такое класс в JavaScript?                         11.07.2024 
34. Как создать экземпляр класса?                         11.07.2024 
35. Что такое модуль в JavaScript?                        11.07.2024 
36. Как импортировать модуль?                             11.07.2024 
37. Как экспортировать модуль?                            11.07.2024 
38. Что такое Promise?                                    11.07.2024 
39. Как работает асинхронность в JavaScript?              11.07.2024 
40. Что такое async/await?                                11.07.2024 
41. Что такое событие в JavaScript?                       15.07.2024 
42. Как добавить обработчик события?                      15.07.2024 
43. Что такое DOM?                                        15.07.2024 
44. Как получить доступ к элементу DOM?                   15.07.2024 
45. Как изменить содержимое элемента DOM?                 15.07.2024 
46. Что такое JSON?                                       15.07.2024 
47. Как преобразовать объект в JSON?                      15.07.2024 
48. Как преобразовать JSON в объект?                      15.07.2024 
49. Что такое XMLHttpRequest?                             15.07.2024 
50. Что такое Fetch API?                                  15.07.2024 

========================Управляющие конструкции
1. Что такое управляющие конструкции в JavaScript?
2. Какие типы циклов существуют в JavaScript?
3. Как работает цикл `while`?
4. В чем разница между циклами `while` и `do...while`?
5. Как использовать цикл `for` для итерации по массиву?
6. Что такое вложенные циклы и как они работают?
7. Как прервать выполнение цикла?
8. Что такое `break` и `continue` в циклах?
9. Как работает условный оператор `if`?
10. Как использовать условный оператор `else`?
11. Что такое условный оператор `else if`?
12. Как использовать тернарный оператор?
13. Что такое логические операторы и как они работают с `if`?
14. Какие значения считаются `true` в логических выражениях?
15. Какие значения считаются `false` в логических выражениях?
16. Как работает оператор `switch`?
17. В чем разница между `switch` и `if...else`?
18. Как использовать блок `default` в `switch`?
19. Какие ошибки могут возникнуть при использовании `switch`?
20. Как избежать "проваливания" в следующий кейс в `switch`?
21. Что такое блок кода и как он определяется?
22. Какие есть правила области видимости в управляющих конструкциях?
23. Как использовать логические операторы для управления потоком программы?
24. Как работает короткое замыкание (`&&` и `||`)?
25. Какие практики считаются лучшими при использовании управляющих конструкций?
26. Как оптимизировать производительность циклов?
27. Какие есть альтернативы циклам в JavaScript?
28. Как использовать `for...in` для итерации по свойствам объекта?
29. Как использовать `for...of` для итерации по итерируемым объектам?
30. В чем разница между `for...in` и `for...of`?
31. Как работает цикл `for` с нестандартными шагами?
32. Как создать бесконечный цикл и зачем он может быть нужен?
33. Как использовать метки (`label`) с циклами?
34. Какие есть способы оптимизации вложенных циклов?
35. Как работает оператор `? :` и в каких случаях его лучше использовать?
36. Какие есть способы преобразования условных операторов в тернарные?
37. Какие есть способы упрощения сложных условных конструкций?
38. Как обрабатывать множественные условия?
39. Как использовать логические операторы в `switch`?
40. Какие есть особенности использования `switch` с числовыми значениями?
41. Какие есть особенности использования `switch` со строковыми значениями?
42. Как обеспечить безопасность управляющих конструкций?
43. Какие есть методы отладки управляющих конструкций?
44. Какие есть альтернативы использованию `if...else` в JavaScript?
45. Какие есть паттерны проектирования, связанные с управляющими конструкциями?
46. Как использовать управляющие конструкции для работы с DOM?
47. Как управляющие конструкции влияют на чтение и понимание кода?
48. Какие есть рекомендации по написанию чистого и понятного кода с использованием управляющих конструкций?
49. Какие есть способы избежать избыточности в управляющих конструкциях?
50. Какие есть лучшие практики для написания управляющих конструкций в асинхронном коде?

========================Функции
1. Что такое функция в JavaScript?
2. Как объявить функцию?
3. Что такое функциональное выражение?
4. В чем разница между функциональным выражением и объявлением функции?
5. Что такое анонимные функции?
6. Как передать параметры в функцию?
7. Что такое аргументы по умолчанию?
8. Как использовать оператор `rest` для сбора аргументов?
9. Что такое область видимости функции?
10. Что такое замыкание и как оно работает?
11. Как возвратить значение из функции?
12. Что такое рекурсивная функция?
13. Как оптимизировать рекурсивные вызовы?
14. Что такое чистая функция?
15. Что такое побочные эффекты в функциях?
16. Как создать IIFE (Immediately Invoked Function Expression)?
17. Что такое функции высшего порядка?
18. Как функции могут быть использованы как значения?
19. Что такое коллбэк-функции?
20. Как использовать функции для асинхронного программирования?
21. Что такое промисы и как они связаны с функциями?
22. Как использовать `async` и `await`?
23. Что такое стрелочные функции и как их использовать?
24. В чем преимущества стрелочных функций?
25. Как `this` работает в стрелочных функциях?
26. Что такое частичное применение функций?
27. Как реализовать каррирование функций?
28. Что такое чейнинг функций?
29. Как создать фабрику функций?
30. Что такое мемоизация и как ее использовать в функциях?
31. Как работает контекст `this` в функциях?
32. Как изменить контекст `this` с помощью `call`, `apply` и `bind`?
33. Что такое конструкторы функций?
34. Как создать приватные переменные в функциях?
35. Как использовать модульный паттерн с функциями?
36. Что такое генераторы и как их использовать?
37. Как тестировать функции в JavaScript?
38. Какие есть способы документирования функций?
39. Как обрабатывать исключения в функциях?
40. Какие есть паттерны проектирования, связанные с функциями?
41. Как оптимизировать производительность функций?
42. Какие есть альтернативы глобальным функциям?
43. Как функции влияют на загрузку и выполнение скриптов?
44. Какие есть лучшие практики для написания функций?
45. Какие есть способы избежать коллизий имен функций?
46. Как использовать функции для работы с DOM?
47. Какие есть способы создания немедленно вызываемых функций?
48. Какие есть методы отладки функций?
49. Какие есть способы обеспечения безопасности функций?
50. Какие есть рекомендации по написанию чистого и понятного кода с использованием функций?

========================Объекты и массивы
1. Что такое объект в JavaScript?
2. Как создать объект?
3. Что такое свойства объекта?
4. Как добавить новое свойство в объект?
5. Как удалить свойство из объекта?
6. Что такое методы объекта?
7. Как можно перебрать все свойства объекта?
8. Что такое прототип объекта?
9. Как работает наследование в JavaScript?
10. Что такое конструктор объекта?
11. Как создать массив в JavaScript?
12. Какие операции можно выполнять с массивами?
13. Как добавить элемент в начало/конец массива?
14. Как удалить элемент из начала/конца массива?
15. Как объединить два массива?
16. Как найти индекс элемента в массиве?
17. Как проверить, является ли значение массивом?
18. Как отсортировать массив?
19. Как выполнить поиск в массиве?
20. Что такое и как работают методы `map`, `filter`, `reduce`?
21. Как изменить каждый элемент массива?
22. Как проверить, содержит ли массив определенное значение?
23. Как преобразовать массив в строку?
24. Как выполнить глубокое копирование объекта или массива?
25. Что такое стек и очередь в контексте массивов?
26. Как работают методы `push`, `pop`, `shift`, `unshift`?
27. Что такое и как использовать `spread` оператор?
28. Как использовать деструктуризацию для объектов и массивов?
29. Что такое `Set` и как он отличается от массива?
30. Как проверить, содержит ли объект определенный ключ?
31. Как скопировать свойства одного объекта в другой?
32. Что такое `Map` и как его использовать?
33. Какие есть способы определения равенства объектов?
34. Как работает метод `Object.assign`?
35. Что такое итерируемые объекты?
36. Как создать массив из итерируемого объекта?
37. Какие есть методы для работы с массивами, возвращающие новый массив?
38. Какие есть методы для работы с массивами, изменяющие исходный массив?
39. Какие есть способы оптимизации работы с большими массивами?
40. Какие есть методы для работы с многомерными массивами?
41. Как работает метод `Object.freeze`?
42. Как проверить, заморожен ли объект?
43. Какие есть способы обхода ограничений `const` для массивов и объектов?
44. Какие есть способы работы с неизменяемыми данными?
45. Какие есть паттерны проектирования, связанные с объектами и массивами?
46. Какие есть способы сериализации и десериализации объектов?
47. Какие есть способы работы с JSON?
48. Какие есть способы глубокого сравнения объектов?
49. Какие есть способы оптимизации производительности при работе с объектами?
50. Какие есть рекомендации по написанию чистого и понятного кода с использованием объектов и массивов?

========================Область видимости и замыкания
1. Что такое область видимости в JavaScript?
2. Какие типы области видимости существуют в JavaScript?
3. Что такое лексическая область видимости?
4. Что такое замыкание в JavaScript?
5. Как создается замыкание?
6. Каковы практические применения замыканий?
7. Что такое глобальная область видимости?
8. Что такое локальная область видимости?
9. Как функции в JavaScript определяют свою область видимости?
10. Что такое блочная область видимости и как она создается?
11. Как `let` и `const` отличаются от `var` с точки зрения области видимости?
12. Как область видимости влияет на переменные с одинаковыми именами?
13. Что такое цепочка областей видимости?
14. Как работает область видимости во вложенных функциях?
15. Как переменные и функции поднимаются в области видимости?
16. Что такое временная мертвая зона в JavaScript?
17. Как `this` определяется в различных областях видимости?
18. Как область видимости влияет на методы объектов?
19. Как можно избежать конфликтов имен в глобальной области видимости?
20. Как замыкания используются для создания приватных переменных?
21. Как область видимости влияет на асинхронный код?
22. Какие есть способы управления областью видимости в больших проектах?
23. Как область видимости связана с выполнением контекста?
24. Как замыкания сохраняют доступ к переменным после возвращения функции?
25. Какие есть ограничения и недостатки замыканий?
26. Как область видимости влияет на производительность JavaScript?
27. Какие есть способы оптимизации области видимости для улучшения производительности?
28. Как область видимости влияет на тестирование кода?
29. Какие есть инструменты для анализа области видимости в JavaScript?
30. Как область видимости влияет на безопасность приложения?
31. Какие есть лучшие практики работы с областью видимости?
32. Как модули в JavaScript используют область видимости?
33. Как область видимости влияет на паттерны проектирования?
34. Как замыкания могут использоваться для мемоизации функций?
35. Как область видимости влияет на обработку исключений?
36. Как область видимости влияет на использование стрелочных функций?
37. Как область видимости влияет на рекурсивные функции?
38. Как область видимости и замыкания влияют на функциональное программирование?
39. Как область видимости влияет на деструктуризацию?
40. Как область видимости влияет на параметры по умолчанию функций?
41. Как область видимости влияет на шаблонные строки?
42. Как область видимости влияет на использование классов в JavaScript?
43. Как область видимости влияет на генераторы и итераторы?
44. Как область видимости влияет на новые возможности ES6 и более поздних версий?
45. Как область видимости влияет на промисы и асинхронные функции?
46. Как область видимости влияет на событийный цикл в JavaScript?
47. Как область видимости влияет на DOM-манипуляции?
48. Как область видимости влияет на использование библиотек и фреймворков?
49. Как область видимости влияет на серверный JavaScript (Node.js)?
50. Какие есть способы визуализации области видимости и замыканий в коде?

========================Стандарт ES6
1. Что такое ES6 и в чем его основные отличия от ES5?
2. Какие новые возможности появились в ES6 для работы со строками?
3. Что такое шаблонные строки в ES6 и как их использовать?
4. Какие новые методы массивов были добавлены в ES6?
5. Что такое стрелочные функции и как они отличаются от обычных функций?
6. Как работает ключевое слово `let` и в чем его отличие от `var`?
7. Что такое блочная область видимости и как она реализована в ES6?
8. Что такое константы в ES6 и как их правильно использовать?
9. Какие новые возможности появились в ES6 для работы с объектами?
10. Что такое деструктуризация и как ее применять?
11. Как в ES6 работает расширение объектных литералов?
12. Что такое параметры по умолчанию и как их задавать в функциях?
13. Как в ES6 использовать оператор распространения (spread operator)?
14. Что такое оставшиеся параметры (rest parameters) и как их использовать?
15. Какие новые возможности появились в ES6 для работы с классами?
16. Что такое наследование классов в ES6 и как его реализовать?
17. Как в ES6 создавать и использовать модули?
18. Что такое промисы (Promises) и как они работают в ES6?
19. Какие новые коллекции появились в ES6 (Map, Set и т.д.)?
20. Что такое итераторы и как они используются в ES6?
21. Как работают генераторы в ES6 и для чего они нужны?
22. Что такое символы (Symbols) и какова их роль в ES6?
23. Как в ES6 реализована работа с прокси (Proxy)?
24. Что такое Reflect API и как его использовать?
25. Какие новые возможности появились для работы с числами и математикой?
26. Как в ES6 работает механизм тегированных шаблонных строк?
27. Что такое и как работает новый цикл `for...of`?
28. Какие есть новые возможности для работы с Unicode в ES6?
29. Какие новые возможности появились для работы с регулярными выражениями?
30. Как в ES6 обрабатывать исключения с помощью блоков `try...catch`?
31. Какие новые возможности появились для работы с JSON в ES6?
32. Что такое и как работает новый метод `Object.assign()`?
33. Какие новые возможности появились для работы с функциями?
34. Как в ES6 определять свойства объектов с помощью вычисляемых имен свойств?
35. Какие новые возможности появились для работы с датами?
36. Как в ES6 использовать новые методы для работы со строками, такие как `startsWith()`, `endsWith()` и `includes()`?
37. Что такое и как работает новый метод `Array.from()`?
38. Какие новые возможности появились для работы с функцией `Math`?
39. Как в ES6 работает новый метод `Array.of()`?
40. Что такое и как работает новый метод `Object.is()`?
41. Какие новые возможности появились для работы с глобальным объектом?
42. Как в ES6 использовать новые методы `Object.values()` и `Object.entries()`?
43. Что такое и как работает новый метод `Object.getOwnPropertyDescriptors()`?
44. Какие новые возможности появились для работы с ошибками?
45. Как в ES6 использовать новые методы `Number.isNaN()` и `Number.isFinite()`?
46. Что такое и как работает новый метод `Number.parseInt()` и `Number.parseFloat()`?
47. Какие новые возможности появились для работы с символами?
48. Как в ES6 использовать новые методы `String.raw()` и `String.fromCodePoint()`?
49. Что такое и как работает новый метод `Array.prototype.fill()`?
50. Какие новые возможности появились для работы с `WeakMap` и `WeakSet`?

========================Асинхронное программирование
1. Что такое асинхронное программирование в контексте JavaScript?
2. Какие существуют способы реализации асинхронного кода в JavaScript?
3. Что такое callback-функция и как она используется для асинхронных операций?
4. Какие проблемы могут возникнуть при использовании callback-функций?
5. Что такое "Callback Hell" и как его избежать?
6. Что такое Promises и как они улучшают работу с асинхронным кодом?
7. Как создать Promise и каковы его состояния?
8. Как использовать методы `then`, `catch` и `finally` с Promises?
9. Что такое цепочка промисов (Promise chaining)?
10. Как обрабатывать ошибки в цепочке промисов?
11. Что такое async/await и как они связаны с Promises?
12. Как правильно использовать async/await для управления асинхронным кодом?
13. Как обрабатывать исключения в асинхронных функциях с использованием async/await?
14. Что такое Event Loop и как он работает в JavaScript?
15. Как JavaScript обрабатывает асинхронные операции, несмотря на то, что он однопоточный?
16. Что такое макрозадачи (macro-tasks) и микрозадачи (micro-tasks)?
17. Каков порядок выполнения макрозадач и микрозадач?
18. Что такое очередь событий (Event Queue) и стек вызовов (Call Stack)?
19. Как работает таймер в JavaScript (например, `setTimeout` и `setInterval`)?
20. Как отменить таймер в JavaScript с помощью `clearTimeout` и `clearInterval`?
21. Что такое XMLHttpRequest и как он используется для асинхронных HTTP-запросов?
22. Какие недостатки у XMLHttpRequest и как их преодолеть?
23. Что такое Fetch API и как оно улучшает асинхронные HTTP-запросы?
24. Как использовать Fetch API для получения данных с сервера?
25. Как отправлять данные на сервер с помощью Fetch API?
26. Что такое CORS (Cross-Origin Resource Sharing) и как он влияет на асинхронные запросы?
27. Как обрабатывать ответы в формате JSON с помощью Fetch API?
28. Какие есть альтернативы Fetch API для выполнения асинхронных HTTP-запросов?
29. Что такое WebSockets и как они используются для асинхронного общения в реальном времени?
30. Какие существуют библиотеки и фреймворки для упрощения асинхронного программирования в JavaScript?
31. Что такое Axios и как он используется для асинхронных HTTP-запросов?
32. Как использовать библиотеку Axios для обработки HTTP-запросов?
33. Что такое Streams и как они используются для асинхронной обработки данных?
34. Какие существуют паттерны для управления асинхронным кодом, кроме Promises и async/await?
35. Какие есть стратегии для управления состоянием асинхронных операций?
36. Что такое Service Workers и как они используются для асинхронных задач?
37. Как реализовать асинхронную загрузку модулей в JavaScript?
38. Что такое `Promise.all` и как его использовать для параллельного выполнения промисов?
39. Как работает `Promise.race` и в каких случаях его применяют?
40. Что такое `Promise.allSettled` и `Promise.any` и как они отличаются от `Promise.all`?
41. Какие есть методы для создания асинхронных итераторов и генераторов?
42. Как использовать асинхронные итераторы для работы с потоками данных?
43. Что такое `async function*` и как она используется?
44. Какие есть особенности работы с асинхронным кодом в Node.js по сравнению с браузером?
45. Какие существуют инструменты для отладки асинхронного кода?
46. Какие лучшие практики существуют для написания чистого и поддерживаемого асинхронного кода?
47. Как использовать асинхронные генераторы для управления потоками данных?
48. Какие есть подходы для тестирования асинхронного кода?
49. Какие существуют распространенные ошибки при работе с асинхронным кодом и как их избежать?
50. Какие новые возможности для асинхронного программирования появились в последних версиях JavaScript?

========================События
1. Что такое события в JavaScript?
2. Какие типы событий вы знаете в JavaScript?
3. Как присвоить обработчик события элементу в HTML?
4. Что такое всплытие событий?
5. Что такое погружение событий?
6. Как остановить всплытие события?
7. Как использовать `addEventListener` для присвоения обработчика события?
8. В чем разница между `onclick` и `addEventListener`?
9. Как удалить обработчик события?
10. Что такое объект события?
11. Какие свойства есть у объекта события?
12. Как получить элемент, на котором произошло событие?
13. Какие методы существуют для предотвращения стандартного поведения события?
14. Как определить координаты мыши при событии клика?
15. Как отслеживать нажатие клавиш на клавиатуре?
16. Какие события существуют для работы с формами?
17. Как отслеживать изменение значения элемента формы?
18. Что такое делегирование событий и как его использовать?
19. Какие события существуют для работы с мышью?
20. Как отслеживать перемещение мыши?
21. Какие события существуют для работы с сенсорными экранами?
22. Как отслеживать мультитач события?
23. Какие события существуют для работы с драг-н-дроп?
24. Как реализовать перетаскивание элемента?
25. Какие события существуют для работы с прокруткой страницы?
26. Как отслеживать изменение размеров окна браузера?
27. Какие события существуют для работы с мультимедиа (аудио, видео)?
28. Как отслеживать загрузку контента на странице?
29. Какие события существуют для работы с анимациями?
30. Как отслеживать завершение CSS-анимации?
31. Какие события существуют для работы с WebSockets?
32. Как отслеживать изменение состояния сетевого соединения?
33. Какие события существуют для работы с IndexedDB?
34. Как отслеживать события ошибок в JavaScript?
35. Какие события существуют для работы с Service Workers?
36. Как отслеживать события жизненного цикла страницы (load, unload)?
37. Какие события существуют для работы с историей браузера?
38. Как отслеживать изменения в URL без перезагрузки страницы?
39. Какие события существуют для работы с файлами?
40. Как отслеживать выбор файла пользователем?
41. Какие события существуют для работы с кэшем приложения?
42. Как отслеживать события изменения ориентации устройства?
43. Какие события существуют для работы с геолокацией?
44. Как отслеживать события изменения фокуса элементов?
45. Какие события существуют для работы с копированием, вставкой и вырезанием?
46. Как отслеживать события изменения содержимого элемента (`contenteditable`)?
47. Какие события существуют для работы с печатью страницы?
48. Как отслеживать события изменения состояния элементов (`checked`, `selected`, `disabled`)?
49. Какие события существуют для работы с SVG?
50. Как отслеживать события изменения данных в элементах форм (`input`, `change`)?

========================DOM-манипуляции
1. Что такое DOM в контексте веб-разработки?
2. Как можно получить доступ к элементу DOM по его `id`?
3. Какие методы существуют для выбора элементов по классу?
4. В чем разница между `getElementById` и `querySelector`?
5. Как изменить текстовое содержимое элемента?
6. Как добавить новый элемент в DOM?
7. Как удалить элемент из DOM?
8. Как клонировать элемент в DOM?
9. Как изменить стиль элемента через JavaScript?
10. Как добавить или удалить класс у элемента?
11. Как обработать клик по элементу?
12. Какие события DOM вы знаете?
13. Как предотвратить стандартное поведение события?
14. Как изменить атрибут элемента?
15. Как проверить наличие определенного атрибута у элемента?
16. Как получить значение выбранного элемента `select`?
17. Как изменить HTML-содержимое элемента?
18. Какие методы существуют для вставки HTML-кода?
19. Как отслеживать изменения в DOM?
20. Как использовать `childNodes` и `children`?
21. Как найти родительский элемент элемента?
22. Как получить следующий или предыдущий элемент-сосед?
23. Какие методы существуют для работы с атрибутами `data-*`?
24. Как создать текстовый узел в DOM?
25. Как переместить элемент внутри DOM?
26. Как определить размеры и положение элемента?
27. Как отслеживать нажатие клавиш при фокусе на элементе?
28. Какие методы существуют для работы с прокруткой элемента?
29. Как определить, виден ли элемент на экране?
30. Как использовать `innerHTML` и `outerHTML`?
31. Какие есть ограничения и недостатки при работе с `innerHTML`?
32. Какие методы существуют для работы с CSS-классами?
33. Как изменить `document.title`?
34. Как определить, поддерживает ли браузер определенное свойство CSS?
35. Как работать с событиями загрузки документа?
36. Какие методы существуют для работы с формами?
37. Как отслеживать изменения в полях формы?
38. Как отправить форму через JavaScript?
39. Какие методы существуют для работы с `iframe`?
40. Какие существуют способы оптимизации манипуляций с DOM?
41. Какие паттерны проектирования полезны при работе с DOM?
42. Какие инструменты разработчика помогают при работе с DOM?
43. Какие существуют способы борьбы с "дребезгом" (`debouncing`) событий?
44. Какие есть способы для оптимизации производительности при большом количестве обработчиков событий?
45. Как работать с шаблонами (`template`) в DOM?
46. Какие есть методы для сериализации и десериализации DOM-структур?
47. Какие существуют способы для асинхронной загрузки скриптов?
48. Какие есть методы для работы с `shadow DOM`?
49. Какие существуют способы для работы с виртуальным DOM?
50. Какие есть методы для обнаружения утечек памяти при работе с DOM?

========================Формы и валидация
1. Какие существуют типы валидации форм?
2. Что такое HTML5 валидация?
3. Как использовать атрибут `required` для поля формы?
4. Какие существуют значения атрибута `type` для ввода данных в форму?
5. Как проверить, что поле формы не пустое?
6. Как валидировать email в форме?
7. Как можно валидировать номер телефона?
8. Как использовать регулярные выражения для валидации форм?
9. Какие события формы вы знаете?
10. Как предотвратить отправку формы при нажатии на кнопку `submit`?
11. Как программно создать и отправить форму?
12. Как валидировать форму перед её отправкой?
13. Какие методы существуют для валидации чисел?
14. Как установить минимальное и максимальное значение для ввода чисел?
15. Как работать с атрибутом `pattern` для валидации форм?
16. Как отобразить сообщение об ошибке валидации?
17. Как изменить стиль валидации по умолчанию?
18. Какие есть способы для кастомизации сообщений об ошибках?
19. Как сбросить форму до начальных значений?
20. Как работать с элементом `fieldset`?
21. Как отключить валидацию на стороне клиента?
22. Какие есть методы для работы с `datalist`?
23. Какие существуют способы для работы с множественным выбором (`multiple select`)?
24. Какие есть методы для работы с `range` слайдерами?
25. Какие существуют способы для работы с `progress` и `meter`?
26. Какие есть методы для работы с `autocomplete`?
27. Какие существуют способы для работы с `novalidate`?
28. Какие есть методы для работы с `formaction` и `formmethod`?
29. Какие существуют способы для работы с `formenctype`?
30. Какие есть методы для работы с `formtarget`?
31. Какие существуют способы для работы с `formnovalidate` и `form` атрибутами кнопки `submit`?
32. Какие есть методы для работы с `label` и связывания его с элементами формы?
33. Какие существуют способы для работы с `placeholder`?
34. Какие есть методы для работы с `autofocus`?
35. Какие существуют способы для работы с `list` атрибутом?
36. Какие есть методы для работы с `step` атрибутом?
37. Какие существуют способы для работы с `min` и `max` атрибутами?
38. Какие есть методы для работы с `readonly` и `disabled`?
39. Какие существуют способы для работы с `size` и `maxlength`?
40. Какие есть методы для работы с `wrap` атрибутом `textarea`?
41. Какие существуют способы для работы с `select` и его атрибутами `multiple`, `required`, и `size`?
42. Какие есть методы для работы с `optgroup` и `option`?
43. Какие существуют способы для работы с `checkbox` и `radio`?
44. Какие есть методы для работы с `file` и его атрибутами `accept`, `multiple`, и `required`?
45. Какие существуют способы для работы с `color`?
46. Какие есть методы для работы с `date`, `time`, `datetime-local`, `month`, и `week`?
47. Какие существуют способы для работы с `number` и его атрибутами `min`, `max`, и `step`?
48. Какие есть методы для работы с `email` и его атрибутами `multiple` и `pattern`?
49. Какие существуют способы для работы с `url` и его атрибутом `pattern`?
50. Какие есть методы для работы с `search` и его атрибутом `pattern`?

========================Запросы к серверу
1. Что такое AJAX?
2. Какие методы HTTP вы знаете?
3. Что такое JSON и как его использовать в запросах к серверу?
4. Как сделать GET-запрос с помощью `fetch`?
5. Что такое `XMLHttpRequest` и как его использовать?
6. Какие есть статусы ответов HTTP?
7. Что такое CORS и как с ним работать?
8. Как отправить POST-запрос с помощью `fetch`?
9. Какие есть способы работы с асинхронными запросами в JavaScript?
10. Что такое Promise и как его использовать при запросах к серверу?
11. Как обрабатывать ошибки при запросах к серверу?
12. Как использовать `async` и `await`?
13. Что такое `headers` в запросах и ответах?
14. Как передать данные в формате `FormData`?
15. Какие есть ограничения при отправке запросов к серверу?
16. Как работать с JSONP для обхода ограничений CORS?
17. Какие есть библиотеки для работы с запросами к серверу?
18. Как использовать `axios` для запросов к серверу?
19. Что такое REST API?
20. Какие принципы RESTful архитектуры вы знаете?
21. Как работать с WebSockets?
22. Что такое GraphQL и как его использовать?
23. Какие есть способы оптимизации запросов к серверу?
24. Какие есть методы для работы с кэшированием ответов?
25. Какие есть способы работы с таймаутами запросов?
26. Какие есть методы для работы с прогрессом загрузки данных?
27. Какие есть способы работы с авторизацией и аутентификацией в запросах?
28. Какие есть методы для работы с куками в запросах?
29. Какие есть способы работы с сессиями?
30. Какие есть методы для работы с токенами доступа?
31. Какие есть способы работы с OAuth?
32. Какие есть методы для работы с заголовками `Authorization`?
33. Какие есть способы работы с мультипарт-формами?
34. Какие есть методы для работы с файлами в запросах?
35. Какие есть способы работы с потоковой передачей данных?
36. Какие есть методы для работы с SSE (Server-Sent Events)?
37. Какие есть способы работы с API версионирования?
38. Какие есть методы для работы с rate limiting?
39. Какие есть способы работы с API ключами?
40. Какие есть методы для работы с запросами на стороне клиента?
41. Какие есть способы работы с серверным логированием?
42. Какие есть методы для работы с деплоем API?
43. Какие есть способы работы с документацией API?
44. Какие есть методы для работы с тестированием API?
45. Какие есть способы работы с мониторингом API?
46. Какие есть методы для работы с версиями библиотек запросов?
47. Какие есть способы работы с обновлениями API?
48. Какие есть методы для работы с депрекацией API?
49. Какие есть способы работы с ошибками сервера?
50. Какие есть методы для работы с API гейтвеями?

========================Инструменты разработчика
1. Как открыть инструменты разработчика в браузере?
2. Какие вкладки доступны в инструментах разработчика Chrome?
3. Что такое консоль браузера и как её использовать?
4. Как просмотреть и изменить CSS элемента через инструменты разработчика?
5. Какие существуют способы отладки JavaScript в браузере?
6. Как использовать точки останова (breakpoints) в JavaScript?
7. Что такое DOM-дерево и как его просматривать?
8. Какие инструменты помогают в профилировании производительности веб-страницы?
9. Какие есть способы оптимизации загрузки ресурсов?
10. Как проверить адаптивность веб-страницы?
11. Какие существуют расширения для браузеров, полезные для разработчиков?
12. Как использовать сетевую панель для анализа запросов?
13. Какие есть методы тестирования JavaScript в браузере?
14. Как работать с локальным хранилищем (localStorage) через инструменты разработчика?
15. Какие есть способы работы с кэшем браузера?
16. Как использовать эмуляцию устройств в инструментах разработчика?
17. Какие есть способы отладки асинхронного кода?
18. Какие есть инструменты для автоматизации тестирования фронтенда?
19. Какие существуют инструменты для работы с версионированием кода?
20. Какие есть способы визуализации процесса выполнения кода?
21. Какие существуют инструменты для анализа памяти веб-приложения?
22. Какие есть способы отслеживания изменений в DOM?
23. Какие существуют инструменты для работы с API в браузере?
24. Какие есть способы работы с CSS-препроцессорами?
25. Какие существуют инструменты для минификации и объединения файлов?
26. Какие есть способы работы с системами сборки проектов (например, Webpack)?
27. Какие существуют инструменты для работы с транспиляцией кода (например, Babel)?
28. Какие есть способы работы с фреймворками для тестирования (например, Jest)?
29. Какие существуют инструменты для работы с документацией кода?
30. Какие есть способы работы с Git в командной строке?
31. Какие существуют инструменты для работы с контейнерами (например, Docker)?
32. Какие есть способы работы с Continuous Integration / Continuous Deployment?
33. Какие существуют инструменты для мониторинга ошибок в реальном времени?
34. Какие есть способы работы с системами управления зависимостями (например, npm)?
35. Какие существуют инструменты для работы с виртуализацией окружения разработки?
36. Какие есть способы работы с автоматизацией рутинных задач?
37. Какие существуют инструменты для работы с форматированием кода (например, Prettier)?
38. Какие есть способы работы с линтингом кода (например, ESLint)?
39. Какие существуют инструменты для работы с обфускацией кода?
40. Какие есть способы работы с тестированием производительности веб-приложений?
41. Какие существуют инструменты для работы с аудитом безопасности кода?
42. Какие есть способы работы с визуализацией данных?
43. Какие существуют инструменты для работы с рефакторингом кода?
44. Какие есть способы работы с дебаггингом в различных браузерах?
45. Какие существуют инструменты для работы с мобильной разработкой?
46. Какие есть способы работы с тестированием кроссбраузерности?
47. Какие существуют инструменты для работы с оптимизацией изображений?
48. Какие есть способы работы с автоматическим обновлением страницы при изменении кода?
49. Какие существуют инструменты для работы с доступностью веб-приложений?
50. Какие есть способы работы с трассировкой производительности JavaScript?

========================Модули
1. Что такое модуль в JavaScript?
2. Какие преимущества использования модулей?
3. Каким образом можно создать модуль в JavaScript?
4. Что такое IIFE (Immediately Invoked Function Expression) и как он связан с модулями?
5. Как экспортировать что-либо из модуля?
6. Какие есть различия между `export` и `export default`?
7. Как импортировать модуль в другой файл?
8. Что такое именованный экспорт и как его использовать?
9. Как можно импортировать все содержимое модуля сразу?
10. В чем разница между CommonJS и ES6 модулями?
11. Как использовать модули CommonJS в JavaScript?
12. Что такое `require()` и для чего он используется?
13. Какие ограничения у ES6 модулей?
14. Можно ли использовать модули ES6 и CommonJS в одном проекте?
15. Какие инструменты сборки поддерживают модули JavaScript?
16. Что такое Babel и как он связан с модулями JavaScript?
17. Какие есть способы организации кода в модулях?
18. Какие паттерны проектирования модулей вы знаете?
19. Что такое namespace и как он используется в модулях?
20. Какие есть способы управления зависимостями в модулях?
21. Какие проблемы могут возникнуть при использовании модулей?
22. Как модули влияют на производительность веб-приложения?
23. Какие есть способы оптимизации загрузки модулей?
24. Что такое динамический импорт и как его использовать?
25. Какие есть ограничения при использовании динамического импорта?
26. Какие есть способы тестирования модулей?
27. Какие инструменты помогают в управлении модулями?
28. Какие есть лучшие практики работы с модулями?
29. Какие есть способы документирования модулей?
30. Какие есть способы версионирования модулей?
31. Какие есть способы разделения кода на модули?
32. Какие есть способы инкапсуляции в модулях?
33. Какие есть способы обмена данными между модулями?
34. Какие есть способы управления контекстом в модулях?
35. Какие есть способы управления состоянием в модулях?
36. Какие есть способы управления ошибками в модулях?
37. Какие есть способы управления событиями в модулях?
38. Какие есть способы управления памятью в модулях?
39. Какие есть способы управления ресурсами в модулях?
40. Какие есть способы управления доступом в модулях?
41. Какие есть способы управления безопасностью в модулях?
42. Какие есть способы управления совместимостью в модулях?
43. Какие есть способы управления масштабируемостью в модулях?
44. Какие есть способы управления производительностью в модулях?
45. Какие есть способы управления международной поддержкой в модулях?
46. Какие есть способы управления лицензированием в модулях?
47. Какие есть способы управления версиями зависимостей в модулях?
48. Какие есть способы управления обновлениями в модулях?
49. Какие есть способы управления деплойментом модулей?
50. Какие есть способы управления жизненным циклом модулей?

========================ООП
1. Что такое ООП?
2. Какие основные принципы ООП вы знаете?
3. Что такое инкапсуляция?
4. Как в JavaScript реализуется наследование?
5. Что такое полиморфизм в контексте ООП?
6. Как создать объект в JavaScript?
7. Что такое конструктор объекта?
8. Как работает прототипное наследование в JavaScript?
9. Что такое класс в JavaScript и как его создать?
10. Какие отличия у классов в JavaScript от классов в других языках программирования?
11. Что такое методы класса?
12. Как создать приватные свойства и методы в классе?
13. Что такое статические свойства и методы и как их использовать?
14. Как реализовать наследование между классами?
15. Что такое абстрактный класс и для чего он нужен?
16. Какие есть способы создания объектов без использования классов?
17. Что такое композиция и как она связана с ООП?
18. Как в JavaScript реализовать миксины?
19. Что такое цепочка прототипов?
20. Как переопределить метод родительского класса?
21. Что такое свойство `prototype` у функций?
22. Как проверить, принадлежит ли свойство объекту или его прототипу?
23. Что такое `this` в контексте ООП?
24. Как изменить контекст `this` в методе?
25. Что такое замыкания и как они используются в ООП?
26. Какие паттерны проектирования ООП вы знаете?
27. Что такое паттерн "Фабрика" и как его реализовать в JavaScript?
28. Что такое паттерн "Одиночка" и как его реализовать?
29. Какие проблемы ООП помогает решить?
30. Какие недостатки у ООП?
31. Как в JavaScript реализовать интерфейсы?
32. Что такое UML и как он используется в ООП?
33. Какие инструменты вы используете для моделирования ООП?
34. Какие есть альтернативы ООП в программировании?
35. Какие есть особенности ООП в функциональных языках программирования?
36. Какие примеры ООП можно найти в стандартной библиотеке JavaScript?
37. Какие есть способы тестирования ООП-кода?
38. Какие есть лучшие практики написания ООП-кода в JavaScript?
39. Какие есть примеры плохого использования ООП?
40. Какие есть способы оптимизации ООП-кода?
41. Какие есть способы документирования ООП-кода?
42. Какие есть способы обеспечения безопасности ООП-кода?
43. Какие есть способы улучшения читаемости ООП-кода?
44. Какие есть способы улучшения производительности ООП-кода?
45. Какие есть способы улучшения масштабируемости ООП-кода?
46. Какие есть способы улучшения поддерживаемости ООП-кода?
47. Какие есть способы улучшения тестируемости ООП-кода?
48. Какие есть способы улучшения интеграции ООП-кода с другими системами?
49. Какие есть способы улучшения взаимодействия ООП-кода с базами данных?
50. Какие есть способы улучшения безопасности ООП-кода?